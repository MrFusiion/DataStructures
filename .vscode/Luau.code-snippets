{
	// Place your DataStructures workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Class": {
		"body": [
			"local Types = require(script.Parent.Types)",
			"",
			"local ${0:$TM_FILENAME_BASE} = {}",
			"${0:$TM_FILENAME_BASE}.ClassName = \"${0:$TM_FILENAME_BASE}\"",
			"${0:$TM_FILENAME_BASE}.__index = ${0:$TM_FILENAME_BASE}",
			"",
			"type Array<Value> = Types.Array<Value>",
			"type int = Types.int",
			"type NonNil = Types.NonNil",
			"",
			"function ${0:$TM_FILENAME_BASE}.new()",
			"\tlocal self = setmetatable({}, ${0:$TM_FILENAME_BASE})",
			"\treturn self",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}.Is(Value)",
			"\treturn type(Value) == \"table\" and getmetatable(Value) == ${0:$TM_FILENAME_BASE}",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:__tostring()",
			"\treturn \"${0:$TM_FILENAME_BASE}\"",
			"end",
			"",
			"export type ${0:$TM_FILENAME_BASE} = typeof(${0:$TM_FILENAME_BASE}.new())",
			"table.freeze(${0:$TM_FILENAME_BASE})",
			"return ${0:$TM_FILENAME_BASE}",
			"",
		],

		"description": "Lua Class",
		"prefix": "class",
	},

	"Doc": {
		"body": [
			"--[[**",
			"\t${1:Function description.}",
			"\t@returns [t:${2:any}] ${3:Return description.}",
			"**--]]",
		],

		"description": "Creates a new doc comment.",
		"prefix": ["doc", "doccomment", "**"],
	},
}